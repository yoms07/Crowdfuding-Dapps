// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Gravatar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Gravatar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Gravatar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Gravatar", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Gravatar | null {
    return changetype<Gravatar | null>(store.get_in_block("Gravatar", id));
  }

  static load(id: string): Gravatar | null {
    return changetype<Gravatar | null>(store.get("Gravatar", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get displayName(): string {
    let value = this.get("displayName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set displayName(value: string) {
    this.set("displayName", Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }
}

export class CrowdfundingMetadata extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CrowdfundingMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CrowdfundingMetadata must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CrowdfundingMetadata", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CrowdfundingMetadata | null {
    return changetype<CrowdfundingMetadata | null>(
      store.get_in_block("CrowdfundingMetadata", id.toHexString()),
    );
  }

  static load(id: Bytes): CrowdfundingMetadata | null {
    return changetype<CrowdfundingMetadata | null>(
      store.get("CrowdfundingMetadata", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get categories(): Array<string> {
    let value = this.get("categories");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set categories(value: Array<string>) {
    this.set("categories", Value.fromStringArray(value));
  }
}

export class CrowdfundingContribution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CrowdfundingContribution entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CrowdfundingContribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CrowdfundingContribution", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CrowdfundingContribution | null {
    return changetype<CrowdfundingContribution | null>(
      store.get_in_block("CrowdfundingContribution", id),
    );
  }

  static load(id: string): CrowdfundingContribution | null {
    return changetype<CrowdfundingContribution | null>(
      store.get("CrowdfundingContribution", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contributor(): string {
    let value = this.get("contributor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contributor(value: string) {
    this.set("contributor", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }
}

export class CrowdfundingBurning extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CrowdfundingBurning entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CrowdfundingBurning must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CrowdfundingBurning", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CrowdfundingBurning | null {
    return changetype<CrowdfundingBurning | null>(
      store.get_in_block("CrowdfundingBurning", id),
    );
  }

  static load(id: string): CrowdfundingBurning | null {
    return changetype<CrowdfundingBurning | null>(
      store.get("CrowdfundingBurning", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Crowdfunding extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Crowdfunding entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Crowdfunding must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Crowdfunding", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Crowdfunding | null {
    return changetype<Crowdfunding | null>(
      store.get_in_block("Crowdfunding", id.toHexString()),
    );
  }

  static load(id: Bytes): Crowdfunding | null {
    return changetype<Crowdfunding | null>(
      store.get("Crowdfunding", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get target(): i32 {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set target(value: i32) {
    this.set("target", Value.fromI32(value));
  }

  get current(): i32 {
    let value = this.get("current");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set current(value: i32) {
    this.set("current", Value.fromI32(value));
  }

  get deadline(): i32 {
    let value = this.get("deadline");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set deadline(value: i32) {
    this.set("deadline", Value.fromI32(value));
  }

  get ipfsURI(): Bytes {
    let value = this.get("ipfsURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set ipfsURI(value: Bytes) {
    this.set("ipfsURI", Value.fromBytes(value));
  }

  get contributions(): Array<string> {
    let value = this.get("contributions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set contributions(value: Array<string>) {
    this.set("contributions", Value.fromStringArray(value));
  }
}

export class UserWallet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserWallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserWallet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserWallet", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserWallet | null {
    return changetype<UserWallet | null>(
      store.get_in_block("UserWallet", id.toHexString()),
    );
  }

  static load(id: Bytes): UserWallet | null {
    return changetype<UserWallet | null>(
      store.get("UserWallet", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): i32 {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set balance(value: i32) {
    this.set("balance", Value.fromI32(value));
  }
}
